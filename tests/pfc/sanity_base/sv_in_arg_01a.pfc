/* <module>
% =============================================
% File 'mpred_builtin.pfc'
% Purpose: Agent Reactivity for SWI-Prolog
% Maintainer: Douglas Miles
% Contact: $Author: dmiles $@users.sourceforge.net ;
% Version: 'interface' 1.0.0
% Revision: $Revision: 1.9 $
% Revised At: $Date: 2002/06/27 14:13:20 $
% =============================================
%
%  PFC is a language extension for prolog.. there is so much that can be done in this language extension to Prolog
%
%
% props(Obj,[height(ObjHt)]) == t(height,Obj,ObjHt) == rdf(Obj,height,ObjHt) == t(height(Obj,ObjHt)).
% padd(Obj,[height(ObjHt)]) == prop_set(height,Obj,ObjHt,...) == ain(height(Obj,ObjHt))
% [pdel/pclr](Obj,[height(ObjHt)]) == [del/clr](height,Obj,ObjHt) == [del/clr]svo(Obj,height,ObjHt) == [del/clr](height(Obj,ObjHt))
% keraseall(AnyTerm).
%
%                      ANTECEEDANT                                   CONSEQUENT
%
%         P =         test nesc true                         assert(P),retract(~P) , enable(P).
%       ~ P =         test nesc false                        assert(~P),retract(P), disable(P)
%
%   ~ ~(P) =         test possible (via not impossible)      retract( ~(P)), enable(P).
%  \+ ~(P) =         test impossiblity is unknown            retract( ~(P))
%   ~ \+(P) =        same as P                               same as P
%     \+(P) =        test naf(P)                             retract(P)
%
% Dec 13, 2035
% Douglas Miles
*/

:- include(test_header).

:- set_fileAssertMt(header_sane).

:- file_begin(pfc).
                 
:- dynamic(someSV_testeed/3).
arity(someSV_testeed,3).

singleValuedInArg(someSV_testeed,3).

:- mpred_test(singleValuedInArgAX(someSV_testeed,3,3)).

someSV_testeed(a,b,1).
someSV_testeed(a,b,2).

:- listing(someSV_testeed/3).
:- mpred_test( \+ someSV_testeed(a,b,1)).
:- mpred_test(    someSV_testeed(a,b,2)).

:- ain(someSV_testeed(a,b,1)).

:- listing(someSV_testeed/3).
:- mpred_test(   someSV_testeed(a,b,1)).
:- mpred_test(\+ someSV_testeed(a,b,2)).

:- ain(someSV_testeed(a,b,2)).

:- listing(someSV_testeed/3).
:- mpred_test( \+ someSV_testeed(a,b,1)).
:- mpred_test(    someSV_testeed(a,b,2)).

:- ain(someSV_testeed(a,b,1)).

:- listing(someSV_testeed/3).
:- mpred_test(   someSV_testeed(a,b,1)).
:- mpred_test(\+ someSV_testeed(a,b,2)).

:- ain((\+ someSV_testeed(a,b,1))).

:- listing(someSV_testeed/3).

%:- (ain(someSV_testeed(a,b,2))).
%:- mpred_test(someSV_testeed(a,b,1)).

